What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
pros:
can manage too big or too small commit properly.
automatic commits can commit codes that are not coplete leading to errors.
Con
but if not proper judgement can lead to a too many or too little commits
can commit files mistakenly to leading to errors.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
helps with the tracking for dependent files , which is good

How can you use the commands git log and git diff to view the history of files?
git log //gives you the time when the file was changed
git diff gives you the time the file was changed and alos what lines were added and what lines were deleted
git diff --stat // name of files ,number of the files ,number of lines added and deleted.

How might using version control make you more confident to make changes that could break something?
it easy to search where the bug is introduced in the various commit and hence one can be more confident in his code and not waste too much time
in finding the issue.

Now that you have your workspace set up, what do you want to try using Git for?
create a repository and make a project





Should not be doing an octopus
Octopus is a strategy Git uses to combine many different versions of code together. This message can appear if you try to use this strategy in an inappropriate situation.

You are in 'detached HEAD' state
HEAD is what Git calls the commit you are currently on. You can “detach” the HEAD by switching to a previous commit, which we’ll see in the next video. Despite what it sounds like, it’s actually not a bad thing to detach the HEAD. Git just warns you so that you’ll realize you’re doing it.

Panic! (the 'impossible' happened)
This is a real error message, but it’s not output by Git. Instead it’s output by GHC, the compiler for a programming language called Haskell. It’s reserved for particularly surprising errors!

Takeaway We hope these errors and warnings amused you as much as they amused us! Now that you know what kind of errors Git can throw, you’re ready to start checking out previous versions of files with Caroline.

